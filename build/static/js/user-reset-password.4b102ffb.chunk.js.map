{"version":3,"sources":["views/user/reset-password.js","helpers/IntlMessages.js","components/common/CustomBootstrap.js"],"names":["validateNewPassword","values","newPassword","newPasswordAgain","errors","connect","authUser","resetPasswordCode","loading","error","resetPasswordAction","resetPassword","location","history","useState","useEffect","NotificationManager","warning","success","initialValues","className","xxs","md","to","id","validate","onSubmit","oobCode","URLSearchParams","search","get","touched","name","type","color","size","injectIntl","props","withRef","Colxx","widths","Separator"],"mappings":"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","file":"static/js/user-reset-password.4b102ffb.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Row, Card, CardTitle, Label, FormGroup, Button } from 'reactstrap';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Formik, Form, Field } from 'formik';\r\nimport { connect } from 'react-redux';\r\nimport { Colxx } from 'components/common/CustomBootstrap';\r\nimport IntlMessages from 'helpers/IntlMessages';\r\nimport { resetPassword } from 'redux/actions';\r\nimport { NotificationManager } from 'components/common/react-notifications';\r\n\r\nconst validateNewPassword = (values) => {\r\n  const { newPassword, newPasswordAgain } = values;\r\n  const errors = {};\r\n  if (newPasswordAgain && newPassword !== newPasswordAgain) {\r\n    errors.newPasswordAgain = 'Please check your new password';\r\n  }\r\n  return errors;\r\n};\r\n\r\nconst ResetPassword = ({\r\n  location,\r\n  history,\r\n  loading,\r\n  error,\r\n  resetPasswordAction,\r\n}) => {\r\n  const [newPassword] = useState('');\r\n  const [newPasswordAgain] = useState('');\r\n\r\n  useEffect(() => {\r\n    if (error) {\r\n      NotificationManager.warning(\r\n        error,\r\n        'Forgot Password Error',\r\n        3000,\r\n        null,\r\n        null,\r\n        ''\r\n      );\r\n    } else if (!loading && newPassword === 'success')\r\n      NotificationManager.success(\r\n        'Please login with your new password.',\r\n        'Reset Password Success',\r\n        3000,\r\n        null,\r\n        null,\r\n        ''\r\n      );\r\n  }, [error, loading, newPassword]);\r\n\r\n  const onResetPassword = (values) => {\r\n    if (!loading) {\r\n      const params = new URLSearchParams(location.search);\r\n      const oobCode = params.get('oobCode');\r\n      if (oobCode) {\r\n        if (values.newPassword !== '') {\r\n          resetPasswordAction({\r\n            newPassword: values.newPassword,\r\n            resetPasswordCode: oobCode,\r\n            history,\r\n          });\r\n        }\r\n      } else {\r\n        NotificationManager.warning(\r\n          'Please check your email url.',\r\n          'Reset Password Error',\r\n          3000,\r\n          null,\r\n          null,\r\n          ''\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  const initialValues = { newPassword, newPasswordAgain };\r\n\r\n  return (\r\n    <Row className=\"h-100\">\r\n      <Colxx xxs=\"12\" md=\"10\" className=\"mx-auto my-auto\">\r\n        <Card className=\"auth-card\">\r\n          <div className=\"position-relative image-side \">\r\n            <p className=\"text-white h2\">Welcome To Bigly24</p>\r\n            <p className=\"white mb-0\">\r\n              Please use your e-mail to reset your password. <br />\r\n              If you are not a member, please{' '}\r\n              <NavLink to=\"/register\" className=\"white\">\r\n                register\r\n              </NavLink>\r\n              .\r\n            </p>\r\n          </div>\r\n          <div className=\"form-side\">\r\n            <NavLink to=\"/\" className=\"white\">\r\n              <span className=\"logo-single\" />\r\n            </NavLink>\r\n            <CardTitle className=\"mb-4\">\r\n              <IntlMessages id=\"user.reset-password\" />\r\n            </CardTitle>\r\n\r\n            <Formik\r\n              validate={validateNewPassword}\r\n              initialValues={initialValues}\r\n              onSubmit={onResetPassword}\r\n            >\r\n              {({ errors, touched }) => (\r\n                <Form className=\"av-tooltip tooltip-label-bottom\">\r\n                  <FormGroup className=\"form-group has-float-label\">\r\n                    <Label>\r\n                      <IntlMessages id=\"user.new-password\" />\r\n                    </Label>\r\n                    <Field\r\n                      className=\"form-control\"\r\n                      name=\"newPassword\"\r\n                      type=\"password\"\r\n                    />\r\n                  </FormGroup>\r\n                  <FormGroup className=\"form-group has-float-label\">\r\n                    <Label>\r\n                      <IntlMessages id=\"user.new-password-again\" />\r\n                    </Label>\r\n                    <Field\r\n                      className=\"form-control\"\r\n                      name=\"newPasswordAgain\"\r\n                      type=\"password\"\r\n                    />\r\n                    {errors.newPasswordAgain && touched.newPasswordAgain && (\r\n                      <div className=\"invalid-feedback d-block\">\r\n                        {errors.newPasswordAgain}\r\n                      </div>\r\n                    )}\r\n                  </FormGroup>\r\n\r\n                  <div className=\"d-flex justify-content-between align-items-center\">\r\n                    <NavLink to=\"/user/login\">\r\n                      <IntlMessages id=\"user.login-title\" />\r\n                    </NavLink>\r\n                    <Button\r\n                      color=\"primary\"\r\n                      className={`btn-shadow btn-multiple-state ${\r\n                        loading ? 'show-spinner' : ''\r\n                      }`}\r\n                      size=\"lg\"\r\n                    >\r\n                      <span className=\"spinner d-inline-block\">\r\n                        <span className=\"bounce1\" />\r\n                        <span className=\"bounce2\" />\r\n                        <span className=\"bounce3\" />\r\n                      </span>\r\n                      <span className=\"label\">\r\n                        <IntlMessages id=\"user.reset-password-button\" />\r\n                      </span>\r\n                    </Button>\r\n                  </div>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n          </div>\r\n        </Card>\r\n      </Colxx>\r\n    </Row>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ authUser }) => {\r\n  const { newPassword, resetPasswordCode, loading, error } = authUser;\r\n  return { newPassword, resetPasswordCode, loading, error };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  resetPasswordAction: resetPassword,\r\n})(ResetPassword);\r\n","import React from 'react';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\n\r\nconst InjectMassage = (props) => <FormattedMessage {...props} />;\r\n\r\nexport default injectIntl(InjectMassage, {\r\n  withRef: false,\r\n});\r\n","import React from 'react';\r\nimport { Col } from 'reactstrap';\r\n\r\nconst Colxx = (props) => (\r\n  <Col {...props} widths={['xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'xxl']} />\r\n);\r\nconst Separator = ({ className }) => (\r\n  <div className={`separator ${className}`} />\r\n);\r\nexport { Colxx, Separator };\r\n"],"sourceRoot":""}